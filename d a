[33mcommit afee2d3513c41371bd9d9c414bce0c46e62c5f34[m[33m ([m[1;36mHEAD[m[33m)[m
Author: Yerlan <yerlan.temir@btsdigital.kz>
Date:   Tue Jul 23 11:18:55 2019 +0600

    model with attention,have a bug with predicting only one value

[1mdiff --git a/decoder_weights b/decoder_weights[m
[1mindex 03bd321..e3f04ca 100644[m
Binary files a/decoder_weights and b/decoder_weights differ
[1mdiff --git a/encoder_weights b/encoder_weights[m
[1mindex 47f5cdb..61e82cf 100644[m
Binary files a/encoder_weights and b/encoder_weights differ
[1mdiff --git a/model_weights b/model_weights[m
[1mindex 65fdffd..aa69c6d 100644[m
Binary files a/model_weights and b/model_weights differ
[1mdiff --git a/temp.ipynb b/temp.ipynb[m
[1mindex cff93cc..b7c5c1c 100644[m
[1m--- a/temp.ipynb[m
[1m+++ b/temp.ipynb[m
[36m@@ -2,7 +2,7 @@[m
  "cells": [[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 6,[m
[32m+[m[32m   "execution_count": 2,[m
    "metadata": {[m
     "scrolled": true[m
    },[m
[36m@@ -17,16 +17,17 @@[m
     "import numpy as np\n",[m
     "import torch\n",[m
     "import torch.nn as nn\n",[m
[32m+[m[32m    "\n",[m
     "import torch.nn.functional as F\n",[m
     "import torch.optim as optim\n",[m
     "\n",[m
     "root_path = 'data/transcriptions'\n",[m
[31m-    "data_path = os.path.join(root_path,'train.csv')"[m
[32m+[m[32m    "data_path = os.path.join(root_path,'train.csv')\n"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 7,[m
[32m+[m[32m   "execution_count": 3,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -91,7 +92,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 256,[m
[32m+[m[32m   "execution_count": 4,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -193,7 +194,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 259,[m
[32m+[m[32m   "execution_count": 5,[m
    "metadata": {[m
     "scrolled": true[m
    },[m
[36m@@ -205,7 +206,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 260,[m
[32m+[m[32m   "execution_count": 6,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -228,7 +229,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 261,[m
[32m+[m[32m   "execution_count": 7,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -253,13 +254,13 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 262,[m
[32m+[m[32m   "execution_count": 8,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[31m-    "class DecoderLSTM(nn.Module):\n",[m
[32m+[m[32m    "class AttentionDecoderLSTM(nn.Module):\n",[m
     "    def __init__(self,embed_dim,hidden_size,output_size,n_layers=1,dropout=0):\n",[m
[31m-    "        super(DecoderLSTM,self).__init__()\n",[m
[32m+[m[32m    "        super(AttentionDecoderLSTM,self).__init__()\n",[m
     "        self.hidden_size = hidden_size\n",[m
     "        self.output_size = output_size\n",[m
     "        self.n_layers = n_layers\n",[m
[36m@@ -268,20 +269,40 @@[m
     "        #layers\n",[m
     "        self.embedding = nn.Embedding(output_size,embed_dim, padding_idx = 0)\n",[m
     "        self.LSTM = nn.LSTM(embed_dim,hidden_size,n_layers,dropout = (0 if n_layers == 1 else self.dropout),batch_first=True)\n",[m
[32m+[m[32m    "        self.concat = nn.Linear(hidden_size*2,hidden_size)\n",[m
     "        self.out = nn.Linear(hidden_size,output_size)\n",[m
     "        \n",[m
     "        \n",[m
[31m-    "    def forward(self,input_step,last_hidden):\n",[m
[32m+[m[32m    "    def forward(self,input_step,last_hidden,encoder_outputs):\n",[m
[32m+[m[32m    "        \n",[m
     "        #input_step (batch_size,seq_len)\n",[m
     "        embedded = self.embedding(input_step)\n",[m
     "        #embedded(batch_size,seq_len,hidden_dim)\n",[m
[31m-    "\n",[m
[31m-    "        output,hidden = self.LSTM(embedded,last_hidden)\n",[m
[31m-    "        #output(batch_size,seq_len,hidden_dim)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        decoder_outputs,hidden = self.LSTM(embedded,last_hidden)\n",[m
[32m+[m[32m    "        #(batch_size,decoder_seq_len,hidden_dim)\n",[m
     "        #seq_len = 1 if we using teacher forcing\n",[m
[31m-    "        #output = output.squeeze(1) #(batch_size,hidden_dim) for teacher forcing\n",[m
     "        \n",[m
[31m-    "        prediction = self.out(output)\n",[m
[32m+[m[32m    "        decoder_outputs = decoder_outputs.transpose(1,2)\n",[m
[32m+[m[32m    "        #(batch_size,hidden_dim,decoder_seq_len)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        attention_weights = encoder_outputs.bmm(decoder_outputs)\n",[m
[32m+[m[32m    "        #(batch_size,encoder_seq_len,decoder_seq_len)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        attention_weights = attention_weights.transpose(1,2)\n",[m
[32m+[m[32m    "        #(batch_size,decoder_seq_len,encoder_seq_len)\n",[m
[32m+[m[32m    "        attention_weights = F.softmax(attention_weights,dim=1)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        context_vector = attention_weights.bmm(encoder_outputs)\n",[m
[32m+[m[32m    "        #(batch_size,decoder_seq_len,hidden_dim)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        decoder_outputs = decoder_outputs.transpose(1,2)\n",[m
[32m+[m[32m    "        #(batch_size,decoder_seq_len,hidden_dim)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        concated = torch.cat((decoder_outputs,context_vector),2)\n",[m
[32m+[m[32m    "        concated_output = torch.tanh(self.concat(concated))\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        prediction = self.out(concated_output)\n",[m
     "        #prediction(seq_len,batch_size,output_dim) if no teacher_forcing\n",[m
     "        \n",[m
     "        return prediction,hidden"[m
[36m@@ -289,46 +310,58 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 263,[m
[32m+[m[32m   "execution_count": 9,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[31m-    "encoder = EncoderLSTM(32,64,len(dataset.characters_vocab)).to(device)"[m
[32m+[m[32m    "device = torch.device(\"cpu\")\n",[m
[32m+[m[32m    "BATCH_SIZE        = 32\n",[m
[32m+[m[32m    "HIDDEN_DIM        = 64\n",[m
[32m+[m[32m    "INPUT_VOCAB_SIZE  = len(dataset.characters_vocab)\n",[m
[32m+[m[32m    "OUTPUT_VOCAB_SIZE = len(dataset.transcripts_vocab)\n",[m
[32m+[m[32m    "encoder = EncoderLSTM(BATCH_SIZE,HIDDEN_DIM,INPUT_VOCAB_SIZE).to(device)\n",[m
[32m+[m[32m    "decoder = AttentionDecoderLSTM(BATCH_SIZE,HIDDEN_DIM,OUTPUT_VOCAB_SIZE).to(device)"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 264,[m
[32m+[m[32m   "execution_count": 11,[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "28"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 264,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
[31m-    "decoder = DecoderLSTM(32,64,len(dataset.transcripts_vocab)).to(device)\n",[m
[31m-    "len(dataset.characters_vocab)"[m
[32m+[m[32m    "for batch in dataloader:\n",[m
[32m+[m[32m    "    kek = batch\n",[m
[32m+[m[32m    "    break\n",[m
[32m+[m[32m    "x = kek[0].to(device)\n",[m
[32m+[m[32m    "x_lengths = kek[1]\n",[m
[32m+[m[32m    "y_in = kek[2].to(device)"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 265,[m
[32m+[m[32m   "execution_count": 13,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[31m-    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"[m
[32m+[m[32m    "encoder_outputs,encoder_hidden = encoder(x,x_lengths)\n",[m
[32m+[m[32m    "decoder_outputs = decoder(y_in,encoder_hidden)\n",[m
[32m+[m[32m    "at = decoder_outputs.bmm(encoder_outputs.transpose(1,2))"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 280,[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "scrolled": true[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "at2 = torch.sum(decoder_outputs*encoder_outputs,dim=2)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -343,8 +376,8 @@[m
     "    \n",[m
     "    def forward(self,x,x_lengths,y,teacher_forcing_ratio = 0.3):\n",[m
     "        \n",[m
[31m-    "        encoder_output,hidden = self.encoder(x,x_lengths)\n",[m
[31m-    "        decoder_outputs,hidden = self.decoder(y,hidden)\n",[m
[32m+[m[32m    "        encoder_outputs,encoder_hidden = self.encoder(x,x_lengths)\n",[m
[32m+[m[32m    "        predictions,hidden = self.decoder(y,encoder_hidden,encoder_outputs)\n",[m
     "        \n",[m
     "       \n",[m
     "        #hidden = self.encoder(x)\n",[m
[36m@@ -357,85 +390,44 @@[m
     "            #top1 = output.max(1)[1]\n",[m
     "           # input_token = (y[:,t] if teacher_force else top1)\n",[m
     "        \n",[m
[31m-    "        return decoder_outputs\n",[m
[32m+[m[32m    "        return predictions\n",[m
     "    \n",[m
     "    def predict(self,x,x_lengths):\n",[m
     "        \n",[m
     "        #batch_size = 1!\n",[m
     "        x.unsqueeze_(0)\n",[m
     "        encoder_outputs,hidden = self.encoder(x,x_lengths)\n",[m
[31m-    "        char_to_input = torch.LongTensor([[2]]).to(device)\n",[m
[31m-    "        preds = []\n",[m
[32m+[m[32m    "        char_to_input = torch.LongTensor([[2]])\n",[m
[32m+[m[32m    "        preds = torch.tensor(char_to_input).to(self.device)\n",[m
[32m+[m[32m    "        \n",[m
     "        while True:\n",[m
[31m-    "            predictions, hidden = self.decoder(char_to_input, hidden)\n",[m
[32m+[m[32m    "            predictions,hidden = self.decoder(preds, hidden,encoder_outputs)\n",[m
     "            index_of_next = torch.argmax(predictions)\n",[m
     "            our_value = index_of_next.item()\n",[m
[32m+[m[32m    "\n",[m
     "            if our_value == 3:\n",[m
     "                break\n",[m
[31m-    "            preds.append(our_value)\n",[m
     "            char_to_input = index_of_next.unsqueeze_(0).unsqueeze_(0)\n",[m
[32m+[m[32m    "            preds = torch.cat((preds,char_to_input),1)\n",[m
     "        return preds"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 281,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "model = seq2seq(encoder,decoder,device).to(device)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 282,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {[m
     "scrolled": true[m
    },[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "seq2seq(\n",[m
[31m-       "  (encoder): EncoderLSTM(\n",[m
[31m-       "    (embedding): Embedding(28, 32, padding_idx=0)\n",[m
[31m-       "    (LSTM): LSTM(32, 64, batch_first=True)\n",[m
[31m-       "  )\n",[m
[31m-       "  (decoder): DecoderLSTM(\n",[m
[31m-       "    (embedding): Embedding(28, 32, padding_idx=0)\n",[m
[31m-       "    (LSTM): LSTM(32, 64, batch_first=True)\n",[m
[31m-       "    (out): Linear(in_features=64, out_features=28, bias=True)\n",[m
[31m-       "  )\n",[m
[31m-       ")"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 282,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
[32m+[m[32m    "model = seq2seq(encoder,decoder,device)\n",[m
[32m+[m[32m    "\n",[m
     "def init_weights(m):\n",[m
     "    for name, param in m.named_parameters():\n",[m
     "        nn.init.uniform_(param.data, -0.08, 0.08)\n",[m
     "        \n",[m
[31m-    "model.apply(init_weights)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 283,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "The model has 53,788 trainable parameters\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[32m+[m[32m    "model.apply(init_weights)\n",[m
[32m+[m[32m    "\n",[m
     "def count_parameters(model):\n",[m
     "    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n",[m
     "\n",[m
[36m@@ -444,7 +436,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 284,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -454,7 +446,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 271,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -496,7 +488,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 272,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -530,7 +522,16 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 273,[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "x[0].shape"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -545,29 +546,23 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 274,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "image/png": "\n",[m
[31m-      "text/plain": [[m
[31m-       "<Figure size 432x288 with 1 Axes>"[m
[31m-      ][m
[31m-     },[m
[31m-     "metadata": {[m
[31m-      "needs_background": "light"[m
[31m-     },[m
[31m-     "output_type": "display_data"[m
[31m-    },[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "\tTrain Loss: 0.356 | Train PPL:   1.427\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "import math\n",[m
     "\n",[m
[36m@@ -593,7 +588,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 275,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -604,20 +599,9 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 290,[m
[32m+[m[32m   "execution_count": 10,[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "IncompatibleKeys(missing_keys=[], unexpected_keys=[])"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 290,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "encoder.load_state_dict(torch.load('encoder_weights'))\n",[m
     "decoder.load_state_dict(torch.load('decoder_weights'))\n",[m
[36m@@ -627,7 +611,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 300,[m
[32m+[m[32m   "execution_count": 18,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -638,27 +622,35 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 301,[m
[32m+[m[32m   "execution_count": 32,[m
    "metadata": {},[m
    "outputs": [[m
     {[m
      "data": {[m
       "text/plain": [[m
[31m-       "tensor([ 6, 21, 17, 21, 20, 21,  6, 21,  8,  8,  4,  0,  0,  0])"[m
[32m+[m[32m       "tensor([10, 24, 10, 18, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",[m
[32m+[m[32m       "         0])"[m
       ][m
      },[m
[31m-     "execution_count": 301,[m
[32m+[m[32m     "execution_count": 32,[m
      "metadata": {},[m
      "output_type": "execute_result"[m
     }[m
    ],[m
    "source": [[m
[31m-    "kek[0][1]"[m
[32m+[m[32m    "kek[0][31]"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 302,[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -667,6 +659,7 @@[m
     "    y_tokens_predicted = []\n",[m
     "    y_tokens_true = []\n",[m
     "    for i in range(batch_size):\n",[m
[32m+[m[32m    "        print(i)\n",[m
     "        x_tokens.append(''.join([dataset.characters_vocab.idx2token(k.item()) for k in batch[0][i] if k.item() != 0]))\n",[m
     "        y_pred = model.predict(batch[0][i].to(device),[batch[1][i]])\n",[m
     "        y_tokens_predicted.append(''.join([dataset.transcripts_vocab.idx2token(k) for k in y_pred]))\n",[m
[36m@@ -682,27 +675,6 @@[m
    "execution_count": null,[m
    "metadata": {},[m
    "outputs": [],[m
[31m-   "source": [[m
[31m-    "predict_batch(model,kek,32)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 574,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "('CATAWBA<pad><pad><pad><pad><pad><pad><pad>',\n",[m
[31m-       " '<sos>KAHTAOBAH<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>')"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 574,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
    "source": [[m
     "inp = ''\n",[m
     "out = ''\n",[m
[36m@@ -715,41 +687,78 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 476,[m
[32m+[m[32m   "execution_count": 22,[m
    "metadata": {},[m
    "outputs": [[m
     {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "torch.Size([18])"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 476,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "0\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "/home/yerlan/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:34: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "RuntimeError",[m
[32m+[m[32m     "evalue": "index out of range at /pytorch/aten/src/TH/generic/THTensorEvenMoreMath.cpp:191",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[0;32m<ipython-input-22-afd31648ad14>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredict_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkek\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[0;32m<ipython-input-21-680436507667>\u001b[0m in \u001b[0;36mpredict_batch\u001b[0;34m(model, batch, batch_size)\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mx_tokens\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcharacters_vocab\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midx2token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m         \u001b[0my_tokens_predicted\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranscripts_vocab\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midx2token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0my_tokens_true\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranscripts_vocab\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midx2token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;32m<ipython-input-9-b1adb4eaf59e>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, x_lengths)\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m             \u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpreds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mencoder_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m             \u001b[0mindex_of_next\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m             \u001b[0mour_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex_of_next\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    487\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;32m<ipython-input-7-d36f5e1cfc30>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input_step, last_hidden, encoder_outputs)\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;31m#input_step (batch_size,seq_len)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0membedded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0;31m#embedded(batch_size,seq_len,hidden_dim)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    487\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/torch/nn/modules/sparse.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    116\u001b[0m         return F.embedding(\n\u001b[1;32m    117\u001b[0m             \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpadding_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_norm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             self.norm_type, self.scale_grad_by_freq, self.sparse)\n\u001b[0m\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36membedding\u001b[0;34m(input, weight, padding_idx, max_norm, norm_type, scale_grad_by_freq, sparse)\u001b[0m\n\u001b[1;32m   1452\u001b[0m         \u001b[0;31m# remove once script supports set_grad_enabled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1453\u001b[0m         \u001b[0m_no_grad_embedding_renorm_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_norm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1454\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale_grad_by_freq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msparse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1456\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",[m
[32m+[m[32m      "\u001b[0;31mRuntimeError\u001b[0m: index out of range at /pytorch/aten/src/TH/generic/THTensorEvenMoreMath.cpp:191"[m
[32m+[m[32m     ][m
     }[m
    ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "predict_batch(model,kek,32)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "a = torch.argmax(predictions).unsqueeze_(0).unsqueeze_(0).shape"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "kek[0][1]"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 460,[m
[32m+[m[32m   "execution_count": null,[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "ename": "NameError",[m
[31m-     "evalue": "name 'x_tokens' is not defined",[m
[31m-     "output_type": "error",[m
[31m-     "traceback": [[m
[31m-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",[m
[31m-      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",[m
[31m-      "\u001b[0;32m<ipython-input-460-2430716c7d3e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_tokens\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",[m
[31m-      "\u001b[0;31mNameError\u001b[0m: name 'x_tokens' is not defined"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "yt.shape"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "x_tokens"[m
    ][m
[36m@@ -760,6 +769,31 @@[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "predict_batch(model,kek,32)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "predict_batch(model,kek,32)"[m
[32m+[m[32m   ][m
   }[m
  ],[m
  "metadata": {[m
[36m@@ -778,7 +812,7 @@[m
    "name": "python",[m
    "nbconvert_exporter": "python",[m
    "pygments_lexer": "ipython3",[m
[31m-   "version": "3.7.3"[m
[32m+[m[32m   "version": "3.7.0"[m
   }[m
  },[m
  "nbformat": 4,[m
[1mdiff --git a/tut1-model.pt b/tut1-model.pt[m
[1mindex 65fdffd..b0bb2a3 100644[m
Binary files a/tut1-model.pt and b/tut1-model.pt differ

[33mcommit 4a818eaabf1f1dc189747571b2be03b08e4e98cb[m
Author: Yerlan <yerlan.temir@btsdigital.kz>
Date:   Sat Jul 20 19:34:49 2019 +0500

    docs(temp.ipynb):VANILLA seq2seq model by using pack padded seq,loss ~ 0.35

[1mdiff --git a/decoder_weights b/decoder_weights[m
[1mindex 5254775..03bd321 100644[m
Binary files a/decoder_weights and b/decoder_weights differ
[1mdiff --git a/encoder_weights b/encoder_weights[m
[1mindex 7f979a5..47f5cdb 100644[m
Binary files a/encoder_weights and b/encoder_weights differ
[1mdiff --git a/model_weights b/model_weights[m
[1mindex 5a76933..65fdffd 100644[m
Binary files a/model_weights and b/model_weights differ
[1mdiff --git a/temp.ipynb b/temp.ipynb[m
[1mindex f041d01..cff93cc 100644[m
[1m--- a/temp.ipynb[m
[1m+++ b/temp.ipynb[m
[36m@@ -2,7 +2,7 @@[m
  "cells": [[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 40,[m
[32m+[m[32m   "execution_count": 6,[m
    "metadata": {[m
     "scrolled": true[m
    },[m
[36m@@ -26,7 +26,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 41,[m
[32m+[m[32m   "execution_count": 7,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -91,7 +91,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 526,[m
[32m+[m[32m   "execution_count": 256,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -124,12 +124,15 @@[m
     "    def make_dataset(self):\n",[m
     "        characters = set()\n",[m
     "        transcripts = set()\n",[m
[32m+[m[32m    "        \n",[m
     "        for idx in range(len(self.file)):\n",[m
     "            item = str(self.file.iloc[idx][0]).split(',')\n",[m
     "            \n",[m
     "            x = item[1].strip()\n",[m
     "            for symbol in self.non_needed_symbols:\n",[m
     "                x = x.replace(symbol,'')\n",[m
[32m+[m[32m    "            if x == '':\n",[m
[32m+[m[32m    "                continue\n",[m
     "            y = item[2].replace(' ','')\n",[m
     "            self.data.append({'x':x,'y':y})\n",[m
     "            for character in x:\n",[m
[36m@@ -142,32 +145,38 @@[m
     "    \n",[m
     "            \n",[m
     "    def collate_fn(self, batch): \n",[m
[31m-    "        x_values = []\n",[m
[31m-    "        y_values_in = []\n",[m
[31m-    "        x_lengths = []\n",[m
[31m-    "        y_lengths = []\n",[m
[32m+[m[32m    "        x_values     =  []\n",[m
[32m+[m[32m    "        x_lengths    =  []\n",[m
[32m+[m[32m    "        y_values_in  =  []\n",[m
[32m+[m[32m    "        y_values_out =  []\n",[m
[32m+[m[32m    "        \n",[m
     "        for item in batch:\n",[m
     "            \n",[m
     "            x_values.append([self.characters_vocab.token2idx(ch) for ch in item['x']])\n",[m
     "            y_values_in.append([self.transcripts_vocab.token2idx(tr) for tr in item['y']])\n",[m
[32m+[m[32m    "            y_values_out.append([self.transcripts_vocab.token2idx(tr) for tr in item['y']])\n",[m
[32m+[m[32m    "            \n",[m
[32m+[m[32m    "        sorted_tuples = sorted(zip(x_values,y_values_in,y_values_out),key=lambda x:len(x[0]),reverse=True)\n",[m
[32m+[m[32m    "        x_values     =  [l[0] for l in sorted_tuples]\n",[m
[32m+[m[32m    "        y_values_in  =  [l[1] for l in sorted_tuples]\n",[m
[32m+[m[32m    "        y_values_out =  [l[2] for l in sorted_tuples]\n",[m
     "        \n",[m
[31m-    "        \n",[m
[31m-    "        max_x = len(max(x_values,key=len))\n",[m
[31m-    "        max_y = len(max(y_values_in,key=len))\n",[m
[31m-    "        \n",[m
[31m-    "        for word_index in range(len(x_values)):\n",[m
[32m+[m[32m    "        max_x = len(x_values[0])\n",[m
[32m+[m[32m    "        max_y = max(len(l) for l in y_values_in)\n",[m
     "            \n",[m
[31m-    "            x_lengths.append(len(x_values[word_index]))\n",[m
[31m-    "            y_lengths.append(len(y_values_in[word_index]))\n",[m
[32m+[m[32m    "        for word_index in range(len(x_values)):\n",[m
[32m+[m[32m    "            length_of_current_x = len(x_values[word_index])\n",[m
[32m+[m[32m    "            length_of_current_y = len(y_values_in[word_index])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "            x_lengths.append(length_of_current_x)\n",[m
     "            \n",[m
[31m-    "            for _ in range(1+ max_x - len(x_values[word_index])):\n",[m
[32m+[m[32m    "            for _ in range(1 +  max_x - length_of_current_x):\n",[m
     "                x_values[word_index].append(0)\n",[m
[31m-    "            for _ in range(1+ max_y - len(y_values_in[word_index])):\n",[m
[32m+[m[32m    "            for _ in range(1+ max_y - length_of_current_y):\n",[m
     "                y_values_in[word_index].append(0)\n",[m
     "            \n",[m
     "            y_values_in[word_index].insert(0,2)\n",[m
     "            \n",[m
[31m-    "        x_values = torch.tensor(x_values)\n",[m
     "        y_values_in_tensor = torch.tensor(y_values_in)\n",[m
     "        \n",[m
     "        y_values_out = y_values_in        \n",[m
[36m@@ -175,15 +184,16 @@[m
     "            index_of_first_zero = y_values_out[arr_index].index(0)\n",[m
     "            y_values_out[arr_index][index_of_first_zero] = 3\n",[m
     "            y_values_out[arr_index] = y_values_out[arr_index][1:]+[0]\n",[m
[31m-    "            \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "        x_values_tensor     = torch.tensor(x_values)\n",[m
     "        y_values_out_tensor = torch.tensor(y_values_out)\n",[m
     "        \n",[m
[31m-    "        return x_values,y_values_in_tensor,y_values_out_tensor"[m
[32m+[m[32m    "        return x_values_tensor,x_lengths,y_values_in_tensor,y_values_out_tensor"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 527,[m
[32m+[m[32m   "execution_count": 259,[m
    "metadata": {[m
     "scrolled": true[m
    },[m
[36m@@ -195,18 +205,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 203,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "for kek in dataloader:\n",[m
[31m-    "    kek = kek\n",[m
[31m-    "    break"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 554,[m
[32m+[m[32m   "execution_count": 260,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -229,7 +228,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 555,[m
[32m+[m[32m   "execution_count": 261,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -240,17 +239,21 @@[m
     "        self.embedding = nn.Embedding(output_size,embed_dim,padding_idx = 0)\n",[m
     "        self.LSTM = nn.LSTM(embed_dim,hidden_size,n_layers,dropout=(0 if n_layers == 1 else dropout),batch_first=True)\n",[m
     "    \n",[m
[31m-    "    def forward(self,input_seq,hidden=None):\n",[m
[32m+[m[32m    "    def forward(self,input_seq,input_lengths,hidden=None):\n",[m
[32m+[m[32m    "        \n",[m
     "        embedded = self.embedding(input_seq)\n",[m
[31m-    "        #packed = nn.utils.rnn.pack_padded_sequence(embedded,input_lengths)\n",[m
[31m-    "        outputs,hidden = self.LSTM(embedded)\n",[m
[31m-    "        #outputs,_ = nn.utils.rnn.pad_packed_sequence(outputs)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        packed = nn.utils.rnn.pack_padded_sequence(embedded,input_lengths,batch_first=True)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        outputs,hidden = self.LSTM(packed)\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        outputs,_ = nn.utils.rnn.pad_packed_sequence(outputs,batch_first=True)\n",[m
     "        return outputs,hidden"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 556,[m
[32m+[m[32m   "execution_count": 262,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -286,26 +289,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": null,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "hidden = encoder(kek[0].to(device))\n",[m
[31m-    "output,hidden = decoder(kek[1].to(device),hidden)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": null,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "hidden.shape"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 557,[m
[32m+[m[32m   "execution_count": 263,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -314,7 +298,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 558,[m
[32m+[m[32m   "execution_count": 264,[m
    "metadata": {},[m
    "outputs": [[m
     {[m
[36m@@ -323,7 +307,7 @@[m
        "28"[m
       ][m
      },[m
[31m-     "execution_count": 558,[m
[32m+[m[32m     "execution_count": 264,[m
      "metadata": {},[m
      "output_type": "execute_result"[m
     }[m
[36m@@ -335,7 +319,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 559,[m
[32m+[m[32m   "execution_count": 265,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -344,7 +328,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 560,[m
[32m+[m[32m   "execution_count": 280,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -356,9 +340,10 @@[m
     "        self.decoder = decoder\n",[m
     "        self.device = device\n",[m
     "    \n",[m
[31m-    "    def forward(self,x,y,teacher_forcing_ratio = 0.3):\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    def forward(self,x,x_lengths,y,teacher_forcing_ratio = 0.3):\n",[m
     "        \n",[m
[31m-    "        encoder_output,hidden = self.encoder(x)\n",[m
[32m+[m[32m    "        encoder_output,hidden = self.encoder(x,x_lengths)\n",[m
     "        decoder_outputs,hidden = self.decoder(y,hidden)\n",[m
     "        \n",[m
     "       \n",[m
[36m@@ -374,11 +359,11 @@[m
     "        \n",[m
     "        return decoder_outputs\n",[m
     "    \n",[m
[31m-    "    def predict(self,x):\n",[m
[32m+[m[32m    "    def predict(self,x,x_lengths):\n",[m
     "        \n",[m
     "        #batch_size = 1!\n",[m
     "        x.unsqueeze_(0)\n",[m
[31m-    "        encoder_outputs,hidden = self.encoder(x)\n",[m
[32m+[m[32m    "        encoder_outputs,hidden = self.encoder(x,x_lengths)\n",[m
     "        char_to_input = torch.LongTensor([[2]]).to(device)\n",[m
     "        preds = []\n",[m
     "        while True:\n",[m
[36m@@ -394,7 +379,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 561,[m
[32m+[m[32m   "execution_count": 281,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -403,41 +388,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 377,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "output,hidden = encoder(x)\n",[m
[31m-    "out_input = torch.LongTensor([[2]]).to(device)\n",[m
[31m-    "preds = []\n",[m
[31m-    "\n",[m
[31m-    "output,hidden = decoder(out_input,hidden)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 389,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "torch.Size([1, 1])"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 389,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "output = torch.argmax(output)\n",[m
[31m-    "output.unsqueeze_(0).unsqueeze_(0).shape"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 562,[m
[32m+[m[32m   "execution_count": 282,[m
    "metadata": {[m
     "scrolled": true[m
    },[m
[36m@@ -458,7 +409,7 @@[m
        ")"[m
       ][m
      },[m
[31m-     "execution_count": 562,[m
[32m+[m[32m     "execution_count": 282,[m
      "metadata": {},[m
      "output_type": "execute_result"[m
     }[m
[36m@@ -473,7 +424,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 563,[m
[32m+[m[32m   "execution_count": 283,[m
    "metadata": {},[m
    "outputs": [[m
     {[m
[36m@@ -493,45 +444,17 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 564,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "optimizer = optim.Adam(model.parameters())"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 565,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "{'<sos>': 2, '<eos>': 3, '<pad>': 0, '<unk>': 1, 'M': 4, 'J': 5, 'W': 6, 'D': 7, 'T': 8, 'H': 9, 'L': 10, 'C': 11, 'R': 12, 'S': 13, 'Y': 14, 'I': 15, 'Z': 16, 'K': 17, 'O': 18, 'F': 19, 'G': 20, 'P': 21, 'V': 22, 'U': 23, 'E': 24, 'A': 25, 'N': 26, 'B': 27}"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 565,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "dataset.transcripts_vocab"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 566,[m
[32m+[m[32m   "execution_count": 284,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[31m-    "criterion = nn.CrossEntropyLoss(ignore_index = 0)\n"[m
[32m+[m[32m    "optimizer = optim.Adam(model.parameters())\n",[m
[32m+[m[32m    "criterion = nn.CrossEntropyLoss(ignore_index = 0)"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 567,[m
[32m+[m[32m   "execution_count": 271,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -544,12 +467,13 @@[m
     "    for i, batch in enumerate(iterator):\n",[m
     "        \n",[m
     "        x = batch[0].to(device)\n",[m
[31m-    "        y_in = batch[1].to(device)\n",[m
[31m-    "        y_out = batch[2].to(device)\n",[m
[32m+[m[32m    "        x_lengths = batch[1]\n",[m
[32m+[m[32m    "        y_in = batch[2].to(device)\n",[m
[32m+[m[32m    "        y_out = batch[3].to(device)\n",[m
     "        \n",[m
     "        optimizer.zero_grad()\n",[m
     "        \n",[m
[31m-    "        output = model(x, y_in)\n",[m
[32m+[m[32m    "        output = model(x,x_lengths, y_in)\n",[m
     "        #output dim (y_seq_len,batch_size,output_dim)\n",[m
     "        output = output.view(output.shape[0]*output.shape[1],-1)\n",[m
     "        y_out = y_out.view(-1)\n",[m
[36m@@ -572,7 +496,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 568,[m
[32m+[m[32m   "execution_count": 272,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -587,10 +511,11 @@[m
     "        for i, batch in enumerate(iterator):\n",[m
     "\n",[m
     "            x = batch[0].to(device)\n",[m
[31m-    "            y_in = batch[1].to(device)\n",[m
[31m-    "            y_out = batch[2].to(device)\n",[m
[32m+[m[32m    "            x_lengths = batch[1]\n",[m
[32m+[m[32m    "            y_in = batch[2].to(device)\n",[m
[32m+[m[32m    "            y_out = batch[3].to(device)\n",[m
     "            \n",[m
[31m-    "            output = model(x,y_in,0) #turn off teacher forcing\n",[m
[32m+[m[32m    "            output = model(x,x_lengths,y_in,0) #turn off teacher forcing\n",[m
     "            \n",[m
     "            output = output.view(output.shape[0]*output.shape[1],-1)\n",[m
     "            y_out = y_out.view(-1)\n",[m
[36m@@ -605,7 +530,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 569,[m
[32m+[m[32m   "execution_count": 273,[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -620,12 +545,12 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 570,[m
[32m+[m[32m   "execution_count": 274,[m
    "metadata": {},[m
    "outputs": [[m
     {[m
      "data": {[m
[31m-      "image/png": "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